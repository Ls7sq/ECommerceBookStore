// <auto-generated />
using System;
using BookStore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210419003938_CreateDataBase")]
    partial class CreateDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Brings powerful charting capabilities to your .NET applications.",
                            Image = "/images/Charts.png",
                            Name = ".NET Charts",
                            Tags = "power | chart | application",
                            UnitPrice = 99.0
                        },
                        new
                        {
                            Id = 2,
                            Desc = "Integrate your .NET apps with PayPal the easy way!",
                            Image = "/images/PayPal.png",
                            Name = ".NET PayPal",
                            Tags = "integrate | pay | app",
                            UnitPrice = 69.0
                        },
                        new
                        {
                            Id = 3,
                            Desc = "Supercharged .NET machine learning libraries.",
                            Image = "/images/ML.png",
                            Name = ".NET ML",
                            Tags = "machine | learn | ml",
                            UnitPrice = 299.0
                        },
                        new
                        {
                            Id = 4,
                            Desc = "Performs data mining and analytics easily in .NET.",
                            Image = "/images/Analytics.png",
                            Name = ".NET Analytics",
                            Tags = "data | mining | analytic",
                            UnitPrice = 299.0
                        },
                        new
                        {
                            Id = 5,
                            Desc = "Logs and aggregates events easily in your .NET apps.",
                            Image = "/images/Logger.png",
                            Name = ".NET Logger",
                            Tags = "log | event | aggregate | app",
                            UnitPrice = 49.0
                        },
                        new
                        {
                            Id = 6,
                            Desc = "Powerful numerical methods for your .NET simulations. ",
                            Image = "/images/Numerics.png",
                            Name = ".NET Numerics",
                            Tags = "power | num | simulat",
                            UnitPrice = 199.0
                        });
                });

            modelBuilder.Entity("BookStore.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCheckOut")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BookStore.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BookStore.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BookStore.Models.PurcahsedActivationCode", b =>
                {
                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CartItemId")
                        .HasColumnType("int");

                    b.HasKey("ActivationCode");

                    b.HasIndex("CartItemId");

                    b.ToTable("PurcahsedActivationCodes");
                });

            modelBuilder.Entity("BookStore.Models.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("BookStore.Models.Wishlist_AJAX", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("WishlistStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("wishlistID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("itemId");

                    b.ToTable("Wishlist_AJAX");
                });

            modelBuilder.Entity("BookStore.Models.CartItem", b =>
                {
                    b.HasOne("BookStore.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("BookStore.Models.PurcahsedActivationCode", b =>
                {
                    b.HasOne("BookStore.Models.CartItem", null)
                        .WithMany("ActivationCodes")
                        .HasForeignKey("CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.Models.Session", b =>
                {
                    b.HasOne("BookStore.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookStore.Models.Wishlist_AJAX", b =>
                {
                    b.HasOne("BookStore.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("BookStore.Models.Book", "item")
                        .WithMany()
                        .HasForeignKey("itemId");

                    b.Navigation("Customer");

                    b.Navigation("item");
                });

            modelBuilder.Entity("BookStore.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("BookStore.Models.CartItem", b =>
                {
                    b.Navigation("ActivationCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
